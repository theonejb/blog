<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://www.asadjb.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.asadjb.com/" rel="alternate" type="text/html" /><updated>2024-06-22T14:22:49+04:00</updated><id>https://www.asadjb.com/feed.xml</id><title type="html">Jibran’s Perspective</title><subtitle>A collection of my thoughts and stuff.</subtitle><entry><title type="html">Failure 1: Django + NextJS Boilerplate</title><link href="https://www.asadjb.com/blog/2024-06-16-failure-1" rel="alternate" type="text/html" title="Failure 1: Django + NextJS Boilerplate" /><published>2024-06-16T00:00:00+04:00</published><updated>2024-06-16T00:00:00+04:00</updated><id>https://www.asadjb.com/blog/failure-1</id><content type="html" xml:base="https://www.asadjb.com/blog/2024-06-16-failure-1">&lt;p&gt;I have failed, and that is exactly what I had hoped for a few months ago in &lt;a href=&quot;/blog/2023-12-31-i-have-not-failed-enough&quot;&gt;this blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is a good failure. It has taught me things, lessons I can use in the future to avoid failing this way again.&lt;/p&gt;

&lt;p&gt;But first a bit of context. What did I fail at?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In February of 2024 I decide to try my hands on my first “Indie Hacker” hustle, something that would make me money on the internet without having to trade my time for it. A product instead of consultancy services that I usually provide.&lt;/p&gt;

&lt;p&gt;I had seen a number of people on Twitter (X) rave about how well their bootstrap templates were doing; and I had just gotten out of a consultancy project where I needed to connect a Next.js frontend to a Django backend. I thought it was the perfect project to start my indie hacking journey.&lt;/p&gt;

&lt;p&gt;I put up a &lt;a href=&quot;/blog/2024-02-15-project-1-django-nextjs-boilerplate&quot;&gt;launch post&lt;/a&gt; and started working, updating a &lt;a href=&quot;/build_logs/project-1&quot;&gt;build log&lt;/a&gt; as I went along.&lt;/p&gt;

&lt;p&gt;I gave myself until 28th March 2024 to finish it. That of course did not happen.&lt;/p&gt;

&lt;p&gt;Let’s talk about why I failed and what I learned.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;episode-1-the-one-where-i-dont-understand-the-meaning-of-mvp&quot;&gt;Episode 1: The one where I don’t understand the meaning of MVP&lt;/h2&gt;

&lt;p&gt;My initial plan was to build a Django+Next.js boilerplate template the provided all of these:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the base template that provided a Django backend &amp;amp; Next.js frontend&lt;/li&gt;
  &lt;li&gt;working authentication b/w the backend &amp;amp; frontend&lt;/li&gt;
  &lt;li&gt;Dockerfile that would create the backend &amp;amp; frontend containers for deployment&lt;/li&gt;
  &lt;li&gt;Terraform scripts to setup an infrastructure on AWS&lt;/li&gt;
  &lt;li&gt;Celery + Redis for background task processing&lt;/li&gt;
  &lt;li&gt;TailwindCSS for the frontend (comes mostly for free with Next.js)&lt;/li&gt;
  &lt;li&gt;social auth&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This looks like something achievable in a week or two of work - but only if you’re working full time on this. I failed to consider that I have a day job and a life. I was barely able to tick of the first two of these deliverables by the time my 6 week deadline came up.&lt;/p&gt;

&lt;p&gt;As a good friend told me later, I should have focused on the minimum amount of value I could deliver. Just having the first two things on my list be done would have been enough. I couldn’t charge the $20 I had planned for, but I could have charged $1-$5 for just that.&lt;/p&gt;

&lt;p&gt;And if no one was interested in spending the cost of a coffee on the MVP of the template, that would have been a good signal that this wasn’t going anywhere in it’s current shape.&lt;/p&gt;

&lt;p&gt;Instead, by focusing on building something much bigger, I robbed myself of the ability to validate the idea quickly. I spent all my available time coding the template instead of trying to talk to potential customers about it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson 1&lt;/strong&gt;: Scope down aggressively.&lt;/p&gt;

&lt;h2 id=&quot;episode-2-where-i-jumped-on-the-hype-wagon&quot;&gt;Episode 2: Where I jumped on the hype-wagon&lt;/h2&gt;

&lt;p&gt;I settled on building a boilerplate template because that’s what I had seen a lot of people on Twitter/X doing lately; I’m chalking this down to recency bias.&lt;/p&gt;

&lt;p&gt;I had no personal interest in a boilerplate template. It’s also not a product that I would personally use. I have so far made &lt;em&gt;one&lt;/em&gt; project that uses this tech stack. Most of my other projects are Django, and Ruby on Rails.&lt;/p&gt;

&lt;p&gt;The most successful boilerplate templates I come across are from people who made a bunch of projects in 1 tech stack then realized they needed to do the same thing over-and-over again; which they then packaged into a template they could use. Selling to others was a bonus at first I guess.&lt;/p&gt;

&lt;p&gt;I was very enthusiastic about the project at the start, but as time went on I had to force myself to work on it. My lack of interest in this type of project was a big factor.&lt;/p&gt;

&lt;p&gt;Another factor was there being no way to see the fruits of my labor. I am currently working on an analytics dashboard for another client (a RoR project) and every time I build a feature, I love to play around with it in my free time. I test how it works, make sure the UX is a good one, and just play around and admire the app I’ve made.&lt;/p&gt;

&lt;p&gt;Without me using my template to build new projects, I lacked that feedback loop. Without the loop, I quickly lost interest.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson 2&lt;/strong&gt;: Build something I can use myself. This isn’t a job I’m getting paid for, so the only motivation I have initially until it starts generating money is to build something interesting for myself.&lt;/p&gt;

&lt;h2 id=&quot;episode-3-where-i-had-nothing-for-potential-customers-to-play-around-with&quot;&gt;Episode 3: Where I had nothing for potential customers to play around with&lt;/h2&gt;

&lt;p&gt;This is related to the &lt;a href=&quot;#episode-1-the-one-where-i-dont-understand-the-meaning-of-mvp&quot;&gt;1st lesson&lt;/a&gt;. Because I didn’t have a path to quickly get something out there, there was no way for me to get my “product” into the hands of people who could test and provide feedback.&lt;/p&gt;

&lt;p&gt;I think the problem with a boilerplate template style of product is that you can’t give people a half-backed thing and ask them to test it. Unlike other SaaS apps, there’s no mid-way version of a template. Customers have to “buy-in” to use your template with any project they are starting. With SaaS, users can sign up and test, and then leave if they don’t like it. There’s no easy way of testing with a template.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson 3&lt;/strong&gt;: Build something that can be tested by potential customers easily. For now, I’m going to stick with SaaS style web apps.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Moving forward:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I’ll be working on web app products that users can sign up for and test very quickly.&lt;/li&gt;
  &lt;li&gt;My next few experiments/products will be things that I can use myself as well.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’ll post what I’m going to work on next when I decide and have some time away from my job &amp;amp; freelance projects that are currently in progress.&lt;/p&gt;</content><author><name></name></author><summary type="html">I have failed, and that is exactly what I had hoped for a few months ago in this blog post.</summary></entry><entry><title type="html">Cookie Based Auth for Django and NextJS</title><link href="https://www.asadjb.com/blog/2024-03-03-cookie-based-auth-for-django-and-nextjs" rel="alternate" type="text/html" title="Cookie Based Auth for Django and NextJS" /><published>2024-03-03T00:00:00+04:00</published><updated>2024-03-03T00:00:00+04:00</updated><id>https://www.asadjb.com/blog/cookie-based-auth-for-django-and-nextjs</id><content type="html" xml:base="https://www.asadjb.com/blog/2024-03-03-cookie-based-auth-for-django-and-nextjs">&lt;blockquote&gt;
  &lt;p&gt;If you’re just looking for implementation instructions, skip my ramblings and go straight to the &lt;a href=&quot;#implementation&quot;&gt;code here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’m currently working on my &lt;a href=&quot;/blog/2024-02-15-project-1-django-nextjs-boilerplate&quot;&gt;first project&lt;/a&gt; after deciding that I needed to &lt;a href=&quot;/blog/2023-12-31-i-have-not-failed-enough&quot;&gt;fail more&lt;/a&gt; and practice finishing projects instead of abandoning them midway once they got “boring”.&lt;/p&gt;

&lt;p&gt;Anyways… This one is till in it’s interesting phase, so here’s a blog post with some things I learned yesterday while working on it.&lt;/p&gt;

&lt;p&gt;The project is a &lt;a href=&quot;https://asadjb.gumroad.com/l/nextjs-django-template&quot;&gt;boilerplate template&lt;/a&gt; that should make it easy for devs. to start a new project with a Django backend and a Next.js frontend, something I had to struggle with recently.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;

&lt;p&gt;The first thing I’m looking to solve is authentication. That was my biggest challenge when working on the contracting project that inspired this template.&lt;/p&gt;

&lt;p&gt;While there are a number of good posts around how to setup authentication b/w Django &amp;amp; Next.js, nothing “definitive” came up and I had to cobble together a
weird mess of Django+DRF (Django Rest Framework) and Next.js+NextAuth, sharing
a token from Django that was masquarading as a JWT token for Next.js. It wasn’t pretty and I knew I could do better.&lt;/p&gt;

&lt;h2 id=&quot;the-options&quot;&gt;The options&lt;/h2&gt;

&lt;p&gt;I considered 2 options for authenticating the Next.js frontend with the Django backend:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Token based auth. On logging in, a user receives a token that is stored in local storage by the frontend and send with every request to the backend.&lt;/li&gt;
  &lt;li&gt;Session/Cookie based auth. This is how authentication works in Django by default and is very easy to get started with - it basically comes for free out of the box when you start a new Django project.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While token based auth. is what almost everyone suggests to use when using a Next.js frontend with any backend technology, I wanted to give session based auth. a try. I was curious what it would take to make it work - if it was even possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; It was possible to use cookie/session auth. b/w Django &amp;amp; Next.js - though with a few constraints which make it less appealing than the token based solution&lt;/p&gt;

&lt;p&gt;What follows are my notes on how to set it up, the problems I faced, and why for the template I’m going to go with token based auth. instead.&lt;/p&gt;

&lt;h2 id=&quot;learning-how-cors--set-cookie-works&quot;&gt;Learning how CORS &amp;amp; Set-Cookie works&lt;/h2&gt;

&lt;p&gt;It took me a few hours to get my head around how cross-origin requests and cookies work together, but the actual implementation was surprisingly straight forward.&lt;/p&gt;

&lt;p&gt;This “mini-quest” gave me a chance to learn a lot about how CORS and cookies work, and I’m happy with the time I spent on this. These are the resources which helped me the most (all are from MDN):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot;&gt;Cross-Origin Resource Sharing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&quot;&gt;Same-origin policy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies&quot;&gt;Using HTTP cookies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#samesitesamesite-value&quot;&gt;Set-Cookie&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And finally, there was a surprise waiting for me! Browsers are almost universally making changes to restrict 3rd party or cross-domain cookies because of their privacy implications. Here’s a nice article from MDN about it: &lt;a href=&quot;https://developer.mozilla.org/en-US/blog/goodbye-third-party-cookies/&quot;&gt;Saying goodbye to third-party cookies in 2024&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is the reason why; while this approach works, I won’t be using it in the template. &lt;a href=&quot;#why-not&quot;&gt;More on that later&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;Implementing the session based auth. b/w Django &amp;amp; Next.js is pretty simple.&lt;/p&gt;

&lt;h3 id=&quot;django-configuration&quot;&gt;Django configuration&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Install the &lt;a href=&quot;https://github.com/adamchainz/django-cors-headers&quot;&gt;&lt;code&gt;django-cors-headers&lt;/code&gt;&lt;/a&gt; Python package.
    &lt;ol&gt;
      &lt;li&gt;Add &lt;code&gt;&quot;corsheaders&quot;,&lt;/code&gt; to your &lt;code&gt;INSTALLED_APPS&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;Add the &lt;code&gt;&quot;corsheaders.middleware.CorsMiddleware&quot;,&lt;/code&gt; middleware, right above the existing &lt;code&gt;CommonMiddleware&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;Set &lt;code&gt;CORS_ALLOWED_ORIGINS = [&quot;http://localhost:3000&quot;]&lt;/code&gt;, replacing the URL with your frontend URL.&lt;/li&gt;
      &lt;li&gt;Set &lt;code&gt;CORS_ALLOW_CREDENTIALS = True&lt;/code&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Configure &lt;code&gt;settings.py&lt;/code&gt; to allow cross-domain access for the session cookie.
    &lt;ol&gt;
      &lt;li&gt;Set &lt;code&gt;SESSION_COOKIE_SAMESITE = &quot;None&quot;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Set &lt;code&gt;SESSION_COOKIE_SECURE = True&lt;/code&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;nextjs-configuration&quot;&gt;Next.js configuration&lt;/h3&gt;

&lt;p&gt;No configuration is needed on the frontend. However, you do need to use the &lt;code&gt;credentials: &quot;include&quot;,&lt;/code&gt; option when using the &lt;code&gt;fetch()&lt;/code&gt; API to access your backend.&lt;/p&gt;

&lt;p&gt;Here’s a minimal example.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;use client&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;;

&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;import&lt;/span&gt; { BACKEND_URL } from &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;@/constants&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;;

async &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;signIn&lt;/span&gt;() {
  const loginData = &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;new&lt;/span&gt; FormData();
  loginData.append(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;username&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;admin&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
  loginData.append(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;password&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;admin&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);

  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; await fetch(&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;`&lt;/span&gt;&lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;$&lt;/span&gt;{BACKEND_URL}/accounts/login/&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;`&lt;/span&gt;, {
    &lt;span style=&quot;color:#606&quot;&gt;method&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;POST&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span style=&quot;color:#606&quot;&gt;body&lt;/span&gt;: loginData,
    &lt;span style=&quot;color:#606&quot;&gt;credentials&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;include&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  });
}

async &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;whoAmI&lt;/span&gt;() {
  console.log(
    await fetch(&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;`&lt;/span&gt;&lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;$&lt;/span&gt;{BACKEND_URL}/accounts/me/&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;`&lt;/span&gt;, {
      &lt;span style=&quot;color:#606&quot;&gt;method&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;GET&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span style=&quot;color:#606&quot;&gt;credentials&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;include&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    }),
  );
}

&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;export&lt;/span&gt; &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;default&lt;/span&gt; &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;Home&lt;/span&gt;() {
  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; (
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;main&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;className&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;flex min-h-dvh w-full flex-col justify-around&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;className&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;text-center&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;gt;&lt;/span&gt;Home&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
      &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;className&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;onClick&lt;/span&gt;=&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color:#700&quot;&gt;signIn&lt;/span&gt;&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;gt;&lt;/span&gt;
        Sign In
      &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
      &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;onClick&lt;/span&gt;=&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color:#700&quot;&gt;whoAmI&lt;/span&gt;&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;gt;&lt;/span&gt;Who Am I&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
  );
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;That’s it. That simple piece of code &amp;amp; configuration took me hours to find. Hopefully you can use this example to skip all that time spent trying to figure things out.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Side quest log&lt;/em&gt;: Initially, I was not using the &lt;code&gt;credentials: &quot;include&quot;&lt;/code&gt; option in the &lt;code&gt;signIn()&lt;/code&gt; function above; thinking that I didn’t need to send any cookies with the login call, only the second API call to the &lt;code&gt;/accounts/me&lt;/code&gt; endpoint.&lt;/p&gt;

&lt;p&gt;That mistake cost me about 2 hours of debugging time. If I had &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/fetch#credentials&quot;&gt;RTFM&lt;/a&gt; correctly the first time, I would have seen this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;include&lt;/code&gt;: Tells browsers to include credentials in both same- and cross-origin requests, and always use any credentials sent back in responses.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;credentials: &quot;include&quot;&lt;/code&gt; not only controls if cookies are sent, but also if they are saved when returned by the server.&lt;/p&gt;

&lt;h2 id=&quot;why-not&quot;&gt;Why I won’t use this solution in the template&lt;/h2&gt;

&lt;p&gt;Browsers are phasing out 3rd party cookies (&lt;a href=&quot;https://developer.mozilla.org/en-US/blog/goodbye-third-party-cookies/&quot;&gt;Saying goodbye to third-party cookies in 2024&lt;/a&gt;) and adding features to work around that restriction where needed.&lt;/p&gt;

&lt;p&gt;The simplest way that doesn’t require much change is to use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Privacy/Privacy_sandbox/Partitioned_cookies&quot;&gt;Cookies Having Independent Partitioned State (CHIPS)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To enable CHIPS, you simply put a &lt;code&gt;Partitioned&lt;/code&gt; flag on your &lt;code&gt;Set-Cookie&lt;/code&gt; header, like so:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Set-Cookie: session_id=1234; SameSite=None; Secure; Path=/; Partitioned;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, there’s no straight forward way to do this in Django for now. There’s an open issue to resolve this, but looking at the comments, it won’t likely be solved anytime soon.&lt;/p&gt;

&lt;p&gt;Considering this, I opted to use the token based auth. method for my template. I’ll write a blog on that once I get it working over the next few days.&lt;/p&gt;</content><author><name></name></author><summary type="html">If you’re just looking for implementation instructions, skip my ramblings and go straight to the code here.</summary></entry><entry><title type="html">Project 1: Django + NextJS Boilerplate</title><link href="https://www.asadjb.com/blog/2024-02-15-project-1-django-nextjs-boilerplate" rel="alternate" type="text/html" title="Project 1: Django + NextJS Boilerplate" /><published>2024-02-15T00:00:00+04:00</published><updated>2024-02-15T00:00:00+04:00</updated><id>https://www.asadjb.com/blog/project-1-django-nextjs-boilerplate</id><content type="html" xml:base="https://www.asadjb.com/blog/2024-02-15-project-1-django-nextjs-boilerplate">&lt;p&gt;Links:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://asadjb.gumroad.com/l/nextjs-django-template&quot;&gt;Gumroad page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/build-logs/project-1&quot;&gt;Build Log&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;My &lt;em&gt;accidental&lt;/em&gt; &lt;a href=&quot;/blog/2023-12-31-i-have-not-failed-enough&quot;&gt;new years resolution&lt;/a&gt; was to work on the 1 problem that has plagued me for my entire adult life; failure to commit and focus. I decided to work in 6 week “sprints” (inspired by &lt;a href=&quot;https://basecamp.com/shapeup&quot;&gt;Shape Up&lt;/a&gt;) and complete the projects I start - for some &lt;strong&gt;known&lt;/strong&gt; definition of complete.&lt;/p&gt;

&lt;p&gt;This is the 1st project I have decided to work on. I’ll work on this from today (15th Feb 2024) to (28th Mar 2024). I’ll follow-up then with another post talking about how it went.&lt;/p&gt;

&lt;h2 id=&quot;the-project&quot;&gt;The project&lt;/h2&gt;

&lt;p&gt;The goal is to make &amp;amp; sell a Django + NextJS boilerplate template. What’s a boilerplate template?&lt;/p&gt;

&lt;p&gt;It’s the source code for a project that’s already setup with many things that are needed in a new project; for example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Stripe subscriptions functionality&lt;/li&gt;
  &lt;li&gt;Background jobs&lt;/li&gt;
  &lt;li&gt;CSS framework&lt;/li&gt;
  &lt;li&gt;User/team management&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A great example is &lt;a href=&quot;https://www.saaspegasus.com/&quot;&gt;Saas Pegasus&lt;/a&gt;, which seems like an amazing boilerplate loved by many people.&lt;/p&gt;

&lt;p&gt;My boilerplate is going to be &lt;em&gt;much&lt;/em&gt; simpler - and also much cheaper. SaaS Pegasus comes with so many features that it’s worth the $249 starting price. I’m aiming for $5-$10.&lt;/p&gt;

&lt;h2 id=&quot;goals&quot;&gt;Goals&lt;/h2&gt;

&lt;p&gt;My goal is to sell this boilerplate to at least 10 people - and have them be happy using it. This means:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;talking to prospective customers and seeing if this can be useful to them. People will have the option of scheduling a 15 minute pre-purchase call with me for $5 to see if this would be useful to them. The payment is purely to make sure that I only spend time talking to people who are somewhat serious about purchasing.&lt;/li&gt;
  &lt;li&gt;providing excellent after sales support. I’ll include a 60 minute setup call with me for any purchase. While a 60 minute call for a $10 sale isn’t scalable, it’s a great way for me to talk to customers at the start.&lt;/li&gt;
  &lt;li&gt;having a no questions asked refund policy. My experiences with running an &lt;a href=&quot;https://khalil-ahmed.com/&quot;&gt;e-commerce store&lt;/a&gt; in the past tell me this is an amazing way to build trust.&lt;/li&gt;
  &lt;li&gt;provide on-going support, updates, and fixes over email.&lt;/li&gt;
  &lt;li&gt;build a mailing list of people interested in my work who I can email when I launch my future projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-deliverable&quot;&gt;The deliverable&lt;/h2&gt;

&lt;p&gt;The boilerplate will allow developers to quickly start a project that uses Django for the backend and NextJS for the frontend. My recent experiences with another project in this tech stack required me to spend significant time on:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;figuring out how to setup authentication b/w Django &amp;amp; NextJS (this took the most time &amp;amp; effort)&lt;/li&gt;
  &lt;li&gt;setting up Django Rest Framework so I could write APIs that would be used by the frontend&lt;/li&gt;
  &lt;li&gt;writing Docker files that would build 2 containers - backend &amp;amp; frontend&lt;/li&gt;
  &lt;li&gt;writing Terraform scripts to deploy those containers to AWS ECS&lt;/li&gt;
  &lt;li&gt;writing config &amp;amp; scripts to run the project on Gitpod so it could be easily worked on by my team members&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My plan is to build a boilerplate that already has most those features built in, plus a few extras:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Celery with Redis for background task processing&lt;/li&gt;
  &lt;li&gt;Tailwind CSS for the frontend (in my project I used ChakraUI but Tailwind would be a better option for a boilerplate)&lt;/li&gt;
  &lt;li&gt;If there’s demand for it, a stretch goal is to include social auth (sign-in with Google/Apple/etc)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once complete, I’ll put this on Gumroad and create a landing page there. From then on, it’s all about marketing it; that’s the part which I have no experience with and hope to learn the most from.&lt;/p&gt;

&lt;h2 id=&quot;the-marketing-plan&quot;&gt;The marketing plan&lt;/h2&gt;

&lt;p&gt;This is the area where I lack &lt;em&gt;any&lt;/em&gt; experience; so I’m not sure how I’m going to market this. Some ideas I have:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;build it in public on Twitter. I have a tiny Twitter following (312 followers) so not sure how useful this could be. But I have to try something.&lt;/li&gt;
  &lt;li&gt;share it with people asking how to setup Django &amp;amp; NextJS on forums like Reddit, Stackoverflow, and others.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;maybe&lt;/em&gt; write a blog post on how to setup Django &amp;amp; NextJS and then link to the boilerplate from there. The blog post would provider all the steps necessary for the basic setup and the boilerplate would go beyond that with something that’s ready to use.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-build-log&quot;&gt;The build log&lt;/h2&gt;

&lt;p&gt;I’d also like to create a build log with this project. This will be a daily note of what I did for this project. I’ll keep it in my notes app &lt;a href=&quot;https://reflect.app/&quot;&gt;Reflect&lt;/a&gt; and periodically put it here in this blog post. These daily notes might also serve as content for my build-in-public marketing strategy.&lt;/p&gt;</content><author><name></name></author><summary type="html">Links:</summary></entry><entry><title type="html">I have not failed enough</title><link href="https://www.asadjb.com/blog/2023-12-31-i-have-not-failed-enough" rel="alternate" type="text/html" title="I have not failed enough" /><published>2023-12-31T00:00:00+04:00</published><updated>2023-12-31T00:00:00+04:00</updated><id>https://www.asadjb.com/blog/i-have-not-failed-enough</id><content type="html" xml:base="https://www.asadjb.com/blog/2023-12-31-i-have-not-failed-enough">&lt;p&gt;I was recently listening through the &lt;a href=&quot;https://freakonomics.com/podcast-tag/how-to-succeed-at-failing/&quot;&gt;How to succeed at failing&lt;/a&gt; series on the Freakonomics podcast and started to think about how often I had failed in the past few years. The first answer was - not too much. I couldn’t think of too many instances of where I had “failed”.&lt;/p&gt;

&lt;p&gt;This was not a good thing. It was very much a sad thing that I couldn’t quickly think of many things I had failed at.&lt;/p&gt;

&lt;h2 id=&quot;why-is-not-failing-bad&quot;&gt;Why is not failing bad?&lt;/h2&gt;
&lt;p&gt;I realized I didn’t fail a lot because - &lt;strong&gt;I didn’t try a lot.&lt;/strong&gt; I didn’t fail because I didn’t have good goals.&lt;/p&gt;

&lt;p&gt;Sure, I have a folder full of projects I thought of, researched, some that I even started working on; that I gave up on pretty soon after starting. &lt;em&gt;But those don’t count as failures right?&lt;/em&gt; I was just &lt;em&gt;playing around&lt;/em&gt;, not really aiming for anything. It was just a fun side project.&lt;/p&gt;

&lt;p&gt;That’s why I didn’t fail a lot, and that’s also why it’s not a good thing.&lt;/p&gt;

&lt;h2 id=&quot;i-need-to-fail-more&quot;&gt;I need to fail more&lt;/h2&gt;
&lt;p&gt;Which means that I need to set goals and work towards them. Without goals to aim for, I keep spending my time in the same unproductive loop.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Think of a shiny new project.&lt;/li&gt;
  &lt;li&gt;Play around a bit, maybe learn a few things.&lt;/li&gt;
  &lt;li&gt;Give up when things get hard or boring.&lt;/li&gt;
  &lt;li&gt;Repeat&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While I do learn some things, I don’t really learn new things. Picking up another web backend framework when I’m very good at 1 already (Django if you’re looking to get something built 🙂) is very small incremental progress.&lt;/p&gt;

&lt;p&gt;I should be learning about running a business, marketing, sales, how to talk to people, cold calling, etc. Instead I’m playing around with NextJS/Remix because it’s easier to do and there’s very little chance of me failing at it.&lt;/p&gt;

&lt;h2 id=&quot;what-im-planning-to-do&quot;&gt;What I’m planning to do&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Any new project that I start, I will have an achievable goal for it. Something that can be called “done”.
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;Achievable&lt;/em&gt; is different for everyone. Creating a small SaaS and have 5 people pay for it might be childs play for some, it’s my Everest for now.&lt;/li&gt;
      &lt;li&gt;The plan is to aim for things just outside of my reach – to work towards those and grow in the process.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Have a deadline. For now I’m starting with 6 week cycles of project work.&lt;/li&gt;
  &lt;li&gt;In order meet deadlines, I need to have a clear picture of the goal. Goes back to the first thing on this list. Having a clear definition of “done” is important. But being able to cut scope to achieve some version of the goal is also important.
    - I’ve just finished reading Shape Up by Jason Fried and I like the Basecamp approach of deciding on an appetite (time commitment) to a project and cutting scope to meet that appetite.
    - That’s my plan moving forward. Each project I work on will be “shapped” into an achievable outcome and will have an allocated appetite - when I want to launch it or decide to abandon it. Continuing it for the next 6 week cycle will be another option but should be done sparingly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This approach of timeboxing projects and having an achievable goal is also discussed by Zack Freedman in this video &lt;a href=&quot;https://www.youtube.com/watch?v=L1j93RnIxEo&quot;&gt;Here’s what’s preventing you from finishing projects&lt;/a&gt;. See it when you get the chance.&lt;/p&gt;

&lt;h2 id=&quot;this-wasnt-supposed-to-be-a-new-years-resolution&quot;&gt;This wasn’t supposed to be a new years resolution&lt;/h2&gt;
&lt;p&gt;I started thinking about this over 2 months ago and have been planning to write a post on it. Today seemed like a good day for it. So I guess this is my new year’s resolution. &lt;strong&gt;Fail more, fail better.&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">I was recently listening through the How to succeed at failing series on the Freakonomics podcast and started to think about how often I had failed in the past few years. The first answer was - not too much. I couldn’t think of too many instances of where I had “failed”.</summary></entry><entry><title type="html">My buildspace project</title><link href="https://www.asadjb.com/blog/2023-04-13-my-buildspace-project" rel="alternate" type="text/html" title="My buildspace project" /><published>2023-04-13T00:00:00+04:00</published><updated>2023-04-13T00:00:00+04:00</updated><id>https://www.asadjb.com/blog/my-buildspace-project</id><content type="html" xml:base="https://www.asadjb.com/blog/2023-04-13-my-buildspace-project">&lt;p&gt;&lt;img src=&quot;/assets/images/my-buildspace-project-01.png&quot; alt=&quot;My buildspace project idea launch post image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For the next 6 weeks, I’m taking part in &lt;a href=&quot;https://twitter.com/_buildspace&quot;&gt;buildspace&lt;/a&gt; &lt;a href=&quot;https://buildspace.so/more&quot;&gt;nights &amp;amp; weekends&lt;/a&gt;. It’s a cohort of people that participate in a 6-week long “school” where they work towards any idea they have. The goal is to launch a “product” by the end of these 6 weeks, and to gain as much traction as possible.&lt;/p&gt;

&lt;p&gt;It also includes helpful sessions by people who’ve done this before. This isn’t an accelerator or an incubator though, it’s more like a forcing function to get you motivated to build and launch. The community provides the motivation, and the sessions provide useful knowledge you can apply towards the goal of the program; show your product on demo day at the end of the 6-week period.&lt;/p&gt;

&lt;p&gt;Yesterday was the first session, the goal of which was to select an idea to work on. I keep a list of ideas that I want to work on, and from that, I found a few that I thought would be good candidates for n&amp;amp;w:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;An app to help send take home exercises for programmer interviews.&lt;/li&gt;
  &lt;li&gt;Keep Your Tribe: A personal CRM that can help you keep in touch with the people you value in your life.&lt;/li&gt;
  &lt;li&gt;Dubai schools list. I’ve been researching schools for my daughter and couldn’t find a single source of information that I really liked.&lt;/li&gt;
  &lt;li&gt;A personal &amp;lt;&amp;gt; work calendar sync system. I’ve struggled with making sure that my personal calendar syncs (privately) to my work calendar, so stuff like school pickups, doctor appointments, etc. are blocked on my work cal.&lt;/li&gt;
  &lt;li&gt;A GTD task management system in Notion. I’ve been personally using a system I created over a few weeks for the past 3 years (recently I switched to Things 3) and I found great value in my system for the 3 years that I used it for.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I originally wanted to build one of the SaaS like ideas from the list, but the Notion GTD idea immediately stuck out to me as something that I &lt;em&gt;should&lt;/em&gt; do. It felt like the right size of project that I should take on, and felt like something I could do well.&lt;/p&gt;

&lt;p&gt;But more importantly, it felt &lt;em&gt;very&lt;/em&gt; uncomfortable selecting this project. I could feel my discomfort with this idea. Why?&lt;/p&gt;

&lt;p&gt;I think the discomfort comes from how much potential there is for me to make this idea work in the limited time. With the other SaaS-based ideas, I could justify not launching or growing by building feature after feature.&lt;/p&gt;

&lt;p&gt;With the Notion GTD system, I can’t do that. The system is already built; I’ve been using it for 3 years. I only need to package it up nicely for other people and then focus on selling. Which, I think, is what makes me uncomfortable. Sales is something I’ve never done, and it’s something I believe I’ll suck at.&lt;/p&gt;

&lt;p&gt;Being bad at something is not a great feeling, which is why even though I immediately felt how great a fit the Notion GTD idea is for n&amp;amp;w, I very much wanted to avoid it.&lt;/p&gt;

&lt;p&gt;So, that’s what &lt;a href=&quot;https://twitter.com/asadjibranahmed/status/1646209196508037123?s=20&quot;&gt;I’m committing to&lt;/a&gt;. This feeling of discomfort is what pushed me to commit to this idea. I need to get over my fear, and learn how to sell. I can justify procrastinating on feature development with the other ideas, I can’t do that here.&lt;/p&gt;

&lt;p&gt;This discomfort is good. It’s a sign of what I need to work on.&lt;/p&gt;

&lt;p&gt;Let’s see how the next 6 weeks go.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">State machines - Why and how to use them in web development.</title><link href="https://www.asadjb.com/blog/2022-12-18-state-machines-in-web-development" rel="alternate" type="text/html" title="State machines - Why and how to use them in web development." /><published>2022-12-18T00:00:00+04:00</published><updated>2022-12-18T00:00:00+04:00</updated><id>https://www.asadjb.com/blog/state-machines-in-web-development</id><content type="html" xml:base="https://www.asadjb.com/blog/2022-12-18-state-machines-in-web-development">&lt;h2 id=&quot;what-is-a-state-machine&quot;&gt;What is a state machine?&lt;/h2&gt;

&lt;p&gt;I think Wikipedia does a very good job of &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;defining a state machine&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A finite-state machine (FSM) or finite-state automaton (FSA, plural: automata), finite automaton, or simply a state machine, is a mathematical model of computation. It is an abstract machine that can be in exactly one of a finite number of states at any given time. The FSM can change from one state to another in response to some inputs; the change from one state to another is called a transition. An FSM is defined by a list of its states, its initial state, and the inputs that trigger each transition.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In software development, a state machine is usually represented by some aggregate data structure; an object in an OOP language, or a hash-map in a functional language like Clojure. A state machine can also be saved to your DB as a row in a table.&lt;/p&gt;

&lt;p&gt;This &lt;em&gt;object&lt;/em&gt; has fields for current state and the data in needs to do it’s job. There is also code associated with this object that defines how it transitions between it’s states.&lt;/p&gt;

&lt;h2 id=&quot;an-example&quot;&gt;An example&lt;/h2&gt;

&lt;p&gt;Let’s look at an example. A user trying to change their primary email address, which is also their username.&lt;/p&gt;

&lt;p&gt;The states are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;initial =&amp;gt; This is the starting state in which the machine is initialized.&lt;/li&gt;
  &lt;li&gt;change-in-progress =&amp;gt; The user has asked for the email address to be changed.
verification-in-progress =&amp;gt; We have sent an email to the old email address, asking the user to confirm the change.&lt;/li&gt;
  &lt;li&gt;verification-done =&amp;gt; The user has verified the change.
validation-in-progress =&amp;gt; We have sent an email to the new email address, asking the user to validate that they can receive emails there.&lt;/li&gt;
  &lt;li&gt;validation-done =&amp;gt; The user has validated their new email address.&lt;/li&gt;
  &lt;li&gt;changed =&amp;gt; The change has been applied.&lt;/li&gt;
  &lt;li&gt;request-cancelled =&amp;gt; The request has been cancelled.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Transitions are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;initial =&amp;gt; change-in-progress. Initiated when the user requests the change via a web form.
change-in-progress =&amp;gt; verification-in-progress. We have sent the verification email to the current email address.&lt;/li&gt;
  &lt;li&gt;verification-in-progress =&amp;gt; verification-done. The user has verified that they intended to make this change by clicking a link sent to their existing email.&lt;/li&gt;
  &lt;li&gt;verification-done =&amp;gt; validation-in-progress. We have send the validation email to the new email address.
validation-in-progress =&amp;gt; validation-done. The user has validated the new email address by clicking a link in the email sent to it.&lt;/li&gt;
  &lt;li&gt;validation-done =&amp;gt; changed. We have made the change in our DBs, and run any other processing required for this change.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;any&lt;/em&gt; =&amp;gt; request-cancelled. The request was cancelled by either the user or our systems.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You could also add states for verification or validation failures. Also for failures of our system to send an email.&lt;/p&gt;

&lt;p&gt;The reason to have states like change-in-progress and validation-done is to make sure we only change to the in-progress states after we have sent the email. A failure in our email sending system should not put the user in a state where they need an email to proceed further but our system thinks the email has been sent.
There are more states that can be added to make this more robust. I’ve skipped any states that deal with error conditions (validation failure, etc). For this hypothetical system, we can transition to request-cancelled but you might want more granular states to record exact points of failure.&lt;/p&gt;

&lt;h2 id=&quot;how-do-we-communicatedocument-state-machines&quot;&gt;How do we communicate/document state machines?&lt;/h2&gt;

&lt;p&gt;While we can describe state machines with written descriptions, it’s much easier to use state diagrams. These are the standard way of describing a state machine, and are great at communicating how a state machine functions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/state-machines-01.jpg&quot; alt=&quot;State diagram for changing a users email address&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;whats-the-point&quot;&gt;What’s the point?&lt;/h2&gt;

&lt;p&gt;Looking at the example above, you may be thinking; what’s the point of using a state machine? It seems like we’re needlessly adding a layer of complexity to a simple feature that most web applications built today support happily without a state machine.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Here’s a secret. All software development is building state machines.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://wiki.c2.com/?FiniteStateMachine&quot;&gt;Computers are themselves FSMs&lt;/a&gt;. As is all the software we write on top of them. It’s just that we don’t normally think of the enormous space of possible states, instead we think in terms of values of variables and what they represent in our software.&lt;/p&gt;

&lt;p&gt;Thinking explicitly in terms of FSMs for small parts of our software makes it easy to reason about  it, which is why it’s very useful to model our software as an FSM on smaller scales, in critical modules where we must be absolutely sure of how the software will react to different inputs.&lt;/p&gt;

&lt;h2 id=&quot;a-practical-example&quot;&gt;A practical example&lt;/h2&gt;

&lt;p&gt;I think this whole state machine business is a lot easier to explain with a code sample. &lt;a href=&quot;https://github.com/davidkpiano/xstate&quot;&gt;Xstate&lt;/a&gt; is a popular JS library that makes it easy to build state machines. Instead of copying the code here, I’ll just link it.&lt;/p&gt;

&lt;p&gt;Here’s a &lt;a href=&quot;https://xstate.js.org/docs/tutorials/reddit.html&quot;&gt;tutorial from the Xstate site&lt;/a&gt; that walks you through building an app that displays post from a sub-Reddit. Notice how the code is simpler to reason about. You’re almost breaking the functionality into it’s constituent pieces; what to do while the posts are loading, what behavior to expose when the posts are loaded, and how to react if loading fails.&lt;/p&gt;</content><author><name></name></author><summary type="html">What is a state machine?</summary></entry><entry><title type="html">My knowledge management system</title><link href="https://www.asadjb.com/blog/2022-08-09-my-knowledge-management-system" rel="alternate" type="text/html" title="My knowledge management system" /><published>2022-08-09T00:00:00+04:00</published><updated>2022-08-09T00:00:00+04:00</updated><id>https://www.asadjb.com/blog/my-knowledge-management-system</id><content type="html" xml:base="https://www.asadjb.com/blog/2022-08-09-my-knowledge-management-system">&lt;p&gt;This is a follow-up on my previous notes about Zettelkasten; &lt;a href=&quot;https://blog.asadjb.com/thoughts-on-zettelkasten-and-the-slip-box&quot;&gt;Thoughts on Zettelkasten and the slip box&lt;/a&gt;. Since then, I’ve had a chance to read and think more about the problems I listed out with trying to adapt a Zettelkasten style slip box for my knowledge management system.&lt;/p&gt;

&lt;p&gt;I’ve found a few answers and I’ve come up with a new system that I hope will serve me better.&lt;/p&gt;

&lt;h2 id=&quot;why-did-i-struggle-with-using-the-zettelkasten&quot;&gt;Why did I struggle with using the Zettelkasten?&lt;/h2&gt;

&lt;p&gt;The most important learning I’ve had while searching for an answer to this is something that should have been obvious to me from the start.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A Zettlekasten is a system designed to facilitate publishing. It’s wasn’t meant to be used as a general knowledge management system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This fact very quickly cleared up why the slip box wasn’t working for me as a knowledge management system.&lt;/p&gt;

&lt;p&gt;When you’re using a Zettelkasten system, you “ask” your slip box for questions you should find answers to. This “asking” can be by looking at questions you have open in your notes, or by seeing where you’re forming lumps or groups of notes and expanding on the knowledge already there.&lt;/p&gt;

&lt;p&gt;Since the starting point for your reading and research is a bunch of notes already in your slip box, any new notes will be taken with an eye towards linking it to your existing notes. You naturally build up a group of interconnected notes.&lt;/p&gt;

&lt;p&gt;This is the reason why a slip box doesn’t need much hierarchy or a well maintained index/table of contents. Most notes you add will be linked to older ones. You build up your graph by adding connected notes to it. You seldom add a completely unconnected note to your slip box.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I didn’t need a system to facilitate publishing. I needed a system to store knowledge. These 2 goals might overlap a bit, but they are quite distinct.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most of my notes are on completely unrelated topics. I read based on whatever I find interesting on social media; Hacker News, Indie Hackers, my collection of books on disparate topics, etc. Sometimes I read to understand a topic better by trying to answer questions I had in older notes, in which case I can build a small network of notes - but that’s an infrequent activity for me.&lt;/p&gt;

&lt;p&gt;A Zettelkasten is a poor system to hold notes on a wide variety of subjects, with only few notes per subject. It’s difficult to go back to disconnected notes you have written without maintaining some sort of hierarchy. Trying to shoe horn a hierarchy into a Zettelkasten felt foreign, and was frowned upon in most literature I read about the subject.&lt;/p&gt;

&lt;h2 id=&quot;my-new-system&quot;&gt;My new system&lt;/h2&gt;

&lt;p&gt;With this new information, I can finally get rid of the self-inflicted pain of trying to use the Zettelkasten system to manage my knowledge. Using hierarchical tools makes sense, because my knowledge graph isn’t well connected. It’s mostly a set of disparate notes.&lt;/p&gt;

&lt;p&gt;Some notes form lumps or groups when I become interested in researching something in detail. Most don’t. I need a system I can put my knowledge into and get it back out when needed, without relying on linking between notes.&lt;/p&gt;

&lt;p&gt;I will use MOC (Map of content) instead of folders. Folder give me everything I need for building a hierarchy, but miss out on 1 important feature. There’s no way to demonstrate relationship b/w notes in the same folder. In a MOC, notes can be near to each other when they are related, can form a hierarchical relationship by being indented under other notes, etc.&lt;/p&gt;

&lt;p&gt;I got introduced to the concept of MOCs by &lt;a href=&quot;https://medium.com/@nickmilo22/in-what-ways-can-we-form-useful-relationships-between-notes-9b9ec46973c6&quot;&gt;this excellent blog post&lt;/a&gt; from Nick Milo. He also has a course - &lt;a href=&quot;https://www.linkingyourthinking.com/&quot;&gt;Linking Your Thinking&lt;/a&gt;, that talks about building a personal knowledge management system.&lt;/p&gt;

&lt;p&gt;I’ve decided to use Logseq as my writing tool. Here’s how my new system will work day to day.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I take fleeting or literature notes anywhere. They all come to my dashboard through the queries I have. Mostly this means these notes are in the journal pages.&lt;/li&gt;
  &lt;li&gt;Once a fleeting or literature note is done, it’s marked as status:: complete and it disappears from the dashboard.&lt;/li&gt;
  &lt;li&gt;Permanent notes have to be created from one of the MOC pages. This includes MOCs for topics, but also MOCs for courses, books, etc. This allows me to have a browsable list of notes in my system.&lt;/li&gt;
  &lt;li&gt;What do I make permanent notes out of? To answer this, I need to answer a deeper question. What is the primary reason for my writing?
    &lt;ul&gt;
      &lt;li&gt;To make things clearer to me, to understand deeply. Thus I can make notes of things that I want to make sure I understand. Topics that I don’t care about don’t need a permanent note.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I can add any tags that I think are necessary. Not sure how I can make this more efficient now, but I will add tags for now as another way to discover related notes.&lt;/li&gt;
  &lt;li&gt;When I want to write for publishing, I will use Ulysses as I really like that interface and I can then easily copy to my blogging platform from there. This does mean that I end up writing twice, but I think of my notes in Logseq as a first draft. Rewriting them again before publishing makes the final piece better.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This system is very much an experiment. Once I have been using it for a few months, I should have a better idea of how effective it is in helping me manage my knowledge. I might do a follow-up post then.&lt;/p&gt;</content><author><name></name></author><summary type="html">This is a follow-up on my previous notes about Zettelkasten; Thoughts on Zettelkasten and the slip box. Since then, I’ve had a chance to read and think more about the problems I listed out with trying to adapt a Zettelkasten style slip box for my knowledge management system.</summary></entry><entry><title type="html">Bootstrap with Ruby on Rails 7</title><link href="https://www.asadjb.com/blog/2022-08-07-bootstrap-with-ror-7" rel="alternate" type="text/html" title="Bootstrap with Ruby on Rails 7" /><published>2022-08-07T00:00:00+04:00</published><updated>2022-08-07T00:00:00+04:00</updated><id>https://www.asadjb.com/blog/bootstrap-with-ror-7</id><content type="html" xml:base="https://www.asadjb.com/blog/2022-08-07-bootstrap-with-ror-7">&lt;p&gt;If you have a brand new RoR 7 project that you created with the defaults by running &lt;code&gt;rails new &amp;lt;PROJECT&amp;gt;&lt;/code&gt; then you can safely follow the following steps to get Bootstrap 5 installed in your project.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Install gems&lt;/strong&gt;
Add the following to your &lt;code&gt;Gemfile&lt;/code&gt; and run &lt;code&gt;bundle install&lt;/code&gt;.
    &lt;div class=&quot;language-ruby highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;gem &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&apos;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bootstrap&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&apos;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;~&amp;gt; 5.2.0&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;
gem &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&apos;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jquery-rails&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;
gem &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&apos;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;sass-rails&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#777&quot;&gt;# This may already be present in the file in a commented line, in which case you should uncomment it.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Setup Javascript&lt;/strong&gt;
In your &lt;code&gt;app/javascript/application.js&lt;/code&gt;, add the following at the top.
    &lt;div class=&quot;language-javascript highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span style=&quot;color:#777&quot;&gt;//= require jquery3&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;//= require popper&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;//= require bootstrap&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Load Javascript in your views&lt;/strong&gt;
In the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section of your &lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt;, add this:
    &lt;div class=&quot;language-erb highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;&amp;lt;%=&lt;/span&gt; javascript_importmap_tags &lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Import Bootstrap CSS&lt;/strong&gt;
Rename the existing &lt;code&gt;app/assets/stylesheets/application.css&lt;/code&gt; to &lt;code&gt;app/assets/stylesheets/application.scss&lt;/code&gt; and add a line with &lt;code&gt;@import &quot;bootstrap&quot;&lt;/code&gt; near the top.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;code&gt;sass-rails&lt;/code&gt; Gem allows processing SCSS files to CSS on the fly. RoR 7 is already setup to make use of it without any additional configuration beyond installing the Gem.&lt;/p&gt;

&lt;p&gt;In your HTML the CSS is loaded by the tag &lt;code&gt;&amp;lt;%= stylesheet_link_tag &quot;application&quot;, &quot;data-turbo-track&quot;: &quot;reload&quot; %&amp;gt;&lt;/code&gt; which should already be present in your &lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;why-did-i-write-this&quot;&gt;Why did I write this?&lt;/h2&gt;

&lt;p&gt;I’ve been helping a non-tech fried learn programming for the past few months. He’s working through a Ruby on Rails course, and he’s now at the point where the course walks him through building mini apps; simple web socket based chat, stock trackers, etc…&lt;/p&gt;

&lt;p&gt;Unfortunately the course uses Rail 6, and Rails 7 introduced a couple of new things that changed how JS and CSS files were processed and added. My friend has had constant problems getting Bootstrap to work nicely inside the apps he creates.&lt;/p&gt;

&lt;p&gt;I’ve tried helping him by hacking away over Zoom, following instructions from a bunch of different sources. It worked sometimes, but the last few times he’s asked me to help, I couldn’t not get Bootstrap working, and I had to ask him to move to the next lesson without Bootstrap. It wasn’t a blocker, but it wasn’t a great experience either.&lt;/p&gt;

&lt;p&gt;So today, I spent a few hours pouring over the documentation. What always confused me before was the 2 different ways of processing Javascript that RoR 7 has:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Import maps: &lt;a href=&quot;https://guides.rubyonrails.org/working_with_javascript_in_rails.html&quot;&gt;Working with Javascript in Rails&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://guides.rubyonrails.org/asset_pipeline.html&quot;&gt;The asset pipeline&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I thought these were 2 different systems and you had to choose one over the other. Unfortunately the official Rails Guides (linked above) don’t clarify this in the guides for both of these systems.&lt;/p&gt;

&lt;p&gt;After reading the documentation and experimenting with a local Rails app, I was able to finally understand the basics of these two systems, and how they work together. I’ll describe it next for the next person who faces this confusion.&lt;/p&gt;

&lt;h2 id=&quot;how-import-maps-and-the-asset-pipeline-fit-together&quot;&gt;How import maps and the asset pipeline fit together&lt;/h2&gt;

&lt;p&gt;Import maps are a way to import Javascript modules directly from the browser. Here’s a nice official (I think) resource about it: https://github.com/WICG/import-maps&lt;/p&gt;

&lt;p&gt;Import maps in Rails 7 let you define mappings between the “bare” name you want to use in &lt;code&gt;import React from &quot;react&quot;&lt;/code&gt; and the ESM compatible specifier that must be one of; absolute path, relative path, or a URI.&lt;/p&gt;

&lt;p&gt;That’s it. Import maps have no business in how the files are pre-processed on loaded. If you use the import map tag in your HTML file, it will spit out the following code in the HTML:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;script&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;type&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;importmap&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;data-turbo-track&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;reload&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;    {
      &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;imports&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
        &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;application&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/assets/application-45b83ea01a8c68b3493391ceecb79f31baf4159ca091fee6fd122bf413d79500.js&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
        &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;@hotwired/turbo-rails&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/assets/turbo.min-e5023178542f05fc063cd1dc5865457259cc01f3fba76a28454060d33de6f429.js&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
        &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;@hotwired/stimulus&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/assets/stimulus.min-b8a9738499c7a8362910cd545375417370d72a9776fb4e766df7671484e2beb7.js&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
        &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;@hotwired/stimulus-loading&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/assets/stimulus-loading-1fc59770fb1654500044afd3f5f6d7d00800e5be36746d55b94a2963a7a228aa.js&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
        &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;controllers/application&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/assets/controllers/application-368d98631bccbf2349e0d4f8269afb3fe9625118341966de054759d96ea86c7e.js&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
        &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;controllers/hello_controller&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/assets/controllers/hello_controller-549135e8e7c683a538c3d6d517339ba470fcfb79d62f738a0a089ba41851a554.js&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
        &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;controllers&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/assets/controllers/index-2db729dddcc5b979110e98de4b6720f83f91a123172e87281d5a58410fc43806.js&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
      }
    }&lt;/span&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;rel&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;modulepreload&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;href&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/assets/application-45b83ea01a8c68b3493391ceecb79f31baf4159ca091fee6fd122bf413d79500.js&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;rel&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;modulepreload&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;href&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/assets/turbo.min-e5023178542f05fc063cd1dc5865457259cc01f3fba76a28454060d33de6f429.js&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;rel&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;modulepreload&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;href&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/assets/stimulus.min-b8a9738499c7a8362910cd545375417370d72a9776fb4e766df7671484e2beb7.js&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;rel&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;modulepreload&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;href&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/assets/stimulus-loading-1fc59770fb1654500044afd3f5f6d7d00800e5be36746d55b94a2963a7a228aa.js&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;script&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;src&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/assets/es-module-shims.min-d89e73202ec09dede55fb74115af9c5f9f2bb965433de1c2446e1faa6dac2470.js&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;async&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;async&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;data-turbo-track&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;reload&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;script&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;type&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;module&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;application&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The actual loading of the files is left to the Asset Pipeline. Which is why you can use the import map tag in your HTML file, while still using the //= require jquery directives in your JS files. The Asset Pipeline also provides the fingerprinting that you see in the filenames above.&lt;/p&gt;</content><author><name></name></author><summary type="html">If you have a brand new RoR 7 project that you created with the defaults by running rails new &amp;lt;PROJECT&amp;gt; then you can safely follow the following steps to get Bootstrap 5 installed in your project.</summary></entry><entry><title type="html">Thoughts on Zettelkasten and the slip box</title><link href="https://www.asadjb.com/blog/2022-07-28-thoughts-on-zetelkasten-and-the-slip-box" rel="alternate" type="text/html" title="Thoughts on Zettelkasten and the slip box" /><published>2022-07-28T00:00:00+04:00</published><updated>2022-07-28T00:00:00+04:00</updated><id>https://www.asadjb.com/blog/thoughts-on-zetelkasten-and-the-slip-box</id><content type="html" xml:base="https://www.asadjb.com/blog/2022-07-28-thoughts-on-zetelkasten-and-the-slip-box">&lt;p&gt;I had a bunch of thoughts yesterday about the Zettelkasten method and how I could use it effectively to manage my knowledge base. I started the day by dumping my thoughts into Logseq. Here they are.&lt;/p&gt;

&lt;p&gt;These are open questions for now. I plan to investigate this further and try out different iterations to see what works for me.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I’ve been in a place before where I used Roam to gather a small number of notes (&amp;gt; 100) but then found all of that to be an unmanageable mess.&lt;/li&gt;
  &lt;li&gt;Issues that I see with this setup
    &lt;ul&gt;
      &lt;li&gt;With notes spread all over the place how do I find anything to link to? I can’t go through 200 notes every time I add a new one.&lt;/li&gt;
      &lt;li&gt;All notes are in the same “directory”. Because there is no hierarchy, my notes about productivity are in the same place as my notes about data structures &amp;amp; algorithms. This seems unsustainable.&lt;/li&gt;
      &lt;li&gt;There is 1 benefit I see to this. With everything being in the same place, I can find unexpected connections. Unfortunately, that doesn’t work for me because I don’t go through all my existing notes every time I add a new one.&lt;/li&gt;
      &lt;li&gt;I am interested in many things; productivity, parentings, Islam, algorithms, data structures, system design, programming languages. Having everything in one place seems to add to the mess.&lt;/li&gt;
      &lt;li&gt;As I understand, &lt;a href=&quot;https://en.wikipedia.org/wiki/Niklas_Luhmann&quot;&gt;Niklas Luhmann&lt;/a&gt; researched 1 topic extensively - social science. It would make sense for him to keep all his notes in 1 place.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The reason I’ve heard repeated for not having a hierarchy:
    &lt;ul&gt;
      &lt;li&gt;It promotes unexpected connections b/w notes&lt;/li&gt;
      &lt;li&gt;A note isn’t tied to a single category. It can live in multiple places&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Is that a good enough reason to let go of the organization benefits of a hierarchical structure though?
    &lt;ul&gt;
      &lt;li&gt;It’s much easier to break down browsing notes to find connections if you can “save your place” in your notes. I can look through the notes in 5 folders today, and go through the 5 others later.&lt;/li&gt;
      &lt;li&gt;Notes about the same thing fit differently in different categories. I can take 1 idea and have it fit differently in my notes on parenting and in my notes on productivity. It’s easy to copy and link notes together with our digital systems. I can even symlink the same note to multiple places in the hierarchy.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Zettelkasten also has index notes. Folders essentially serve the same purpose.&lt;/li&gt;
  &lt;li&gt;Questions I have
    &lt;ul&gt;
      &lt;li&gt;Did Luhmann succeed because of his slip box, or in spite of it? Are there other examples of successful writers using such a system?&lt;/li&gt;
      &lt;li&gt;Are slip boxes supposed (who decides?) to hold notes on disparate topics?&lt;/li&gt;
      &lt;li&gt;How do people with large slip boxes navigate? Do they use index cards? If so, can I use folders to serve the same purpose as well as reduce the mental load of browsing through my knowledge base?
        &lt;ul&gt;
          &lt;li&gt;How did Luhmann manage his slip box with 90K notes? I can’t imagine he went through all 90K notes every time he added a new one.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I imagine most courses around “building a 2nd brain” or “cultivating your knowledge garden” answer this question. I haven’t taken any yet, but I plan to. That knowledge might change my perspective on this.&lt;/li&gt;
  &lt;li&gt;Roam/Logseq vs. Obsidian
    &lt;ul&gt;
      &lt;li&gt;Logseq is very structured. Everything is a bullet point. This provides a number of benefits to me.
        &lt;ul&gt;
          &lt;li&gt;Writing is much easier. With a forced structure in place, I can think in outlines and short paragraphs, without getting into the weed of how to structure my writing.&lt;/li&gt;
          &lt;li&gt;If every thing is a block, I can easily reference other blocks inline with my writing.&lt;/li&gt;
          &lt;li&gt;I can write queries that show me subsets of my blocks. For example I have a query to show me all notes with a “status:: incomplete” tag on my dashboard.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;The feature I like most about Logseq is the daily journal. I can write everything there and have it show up in different places. I was attracted to Roam due to this as well.
        &lt;ul&gt;
          &lt;li&gt;It’s great for gathering data and thinking, but didn’t work out for me when consolidating and keeping long term.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Obsidian offers free form writing. It’s not as great to think in, but I feel that it offers a better experience once the thinking is done and I’m writing the final artifact.&lt;/li&gt;
      &lt;li&gt;Artifacts can be permanent notes, but also blog posts and other long form pieces.&lt;/li&gt;
      &lt;li&gt;Here’s what I’m thinking of adapting
        &lt;ul&gt;
          &lt;li&gt;Temporary notes go in Logseq. These are fleeting notes, literature notes, my daily journals with todo items.&lt;/li&gt;
          &lt;li&gt;Once I’ve gathered data and thought about it in Logseq, the final artifacts go into Obsidian, where they are neatly categorized in folders for easy browsing. I can then link b/w notes in Obsidian as well, using the folder hierarchy to easy searching.&lt;/li&gt;
          &lt;li&gt;Because doing the same thing that I did in Roam again in Logseq isn’t useful. I’ll end up repeating the same situation where I get to a few 100 notes and then declare bankruptcy.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">I had a bunch of thoughts yesterday about the Zettelkasten method and how I could use it effectively to manage my knowledge base. I started the day by dumping my thoughts into Logseq. Here they are.</summary></entry><entry><title type="html">How Horo timer educates users</title><link href="https://www.asadjb.com/blog/2022-07-04-how-horo-timer-educates-users" rel="alternate" type="text/html" title="How Horo timer educates users" /><published>2022-07-04T00:00:00+04:00</published><updated>2022-07-04T00:00:00+04:00</updated><id>https://www.asadjb.com/blog/how-horo-timer-educates-users</id><content type="html" xml:base="https://www.asadjb.com/blog/2022-07-04-how-horo-timer-educates-users">&lt;p&gt;&lt;a href=&quot;https://apps.apple.com/us/app/horo-timer-for-menu-bar/id1437226581?mt=12&quot;&gt;Horo&lt;/a&gt; is a simple menu bar timer app for the Mac.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/horo-timer-01.png&quot; alt=&quot;Horo timer screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I use it like a pomodoro timer, but without limiting myself to just 25m blocks. It’s a very small application, but one that provides a lot of value for my workflow.&lt;/p&gt;

&lt;p&gt;I recently noticed the really smart way in which it trains the user in its features, and I believe it has some great lessons for software developers and UX designers.&lt;/p&gt;

&lt;h2 id=&quot;the-challenge-of-educating-users&quot;&gt;The challenge of educating users&lt;/h2&gt;

&lt;p&gt;Educating users about your apps features is the kind of problem that is often overlooked when starting a new project. Indie developers often don’t think about it until the app is complete. It’s not something that is often seen as an “interesting problem to solve”.&lt;/p&gt;

&lt;p&gt;Like marketing however, which is often relegated to the “boring business things to do at the end” category, user education can often have a large impact on the success of your application. If you are unable to teach users how to get value out of you application, users will often stop using it – just because they didn’t know it could solve their problem. It’s must be frustrating to hear users stop using your application because they thought it didn’t have a feature that you spent hours working on.&lt;/p&gt;

&lt;h2 id=&quot;the-usual-solutions&quot;&gt;The usual solutions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;User guide or manual&lt;/li&gt;
  &lt;li&gt;Walkthrough videos&lt;/li&gt;
  &lt;li&gt;In-product walkthrough or popups (like Clippy from Microsoft Office)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/horo-timer-02.gif&quot; alt=&quot;Microsoft Office Clippy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All of these require effort from the user. The user has to spend time:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Reading the manual.&lt;/li&gt;
  &lt;li&gt;Watching the videos.&lt;/li&gt;
  &lt;li&gt;Going through the demo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most users won’t want to invest the time upfront in reading the manual or watching product videos. They’ll only search for solution when they encounter a roadblock. &lt;em&gt;As a side note, having a searchable manual is a must so that users can search for solutions when they want to. Product videos are worst than a manual in my opinion because users can’t skim through easily to the stuff they want.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In-product walkthroughs sound like a good idea. The user is in your application and has all the context in-front of them, so no need to jump b/w the manual and your app. Anecdotal evidence however suggests that users will usually skip demos, or forget the lessons afterwards. I honestly don’t believe in-product walkthroughs solve any problem other than discovery – you can tell users about new or unique features of you application and they might remember to use it later.&lt;/p&gt;

&lt;h2 id=&quot;the-horo-solution&quot;&gt;The Horo solution&lt;/h2&gt;

&lt;p&gt;You might have noticed in the screenshot at the beginning the faded text “@9:30am”. This is &lt;em&gt;one&lt;/em&gt; of the placeholders that you see when you open Horo from the menubar.&lt;/p&gt;

&lt;p&gt;The placeholder is shown in the only input field that Horo has. The user has to enter the duration they want the timer to run for. Horo allows “Natural Language” input in the field. From it’s description on the Mac App Store:&lt;/p&gt;

&lt;p&gt;Some examples of Horo’s flexible Natural Language support:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;“1:30:45” starts a timer for 1 hour, 30 minutes, and 45 seconds&lt;/li&gt;
  &lt;li&gt;“1.5h” starts a timer for 1 hour, 30 minutes&lt;/li&gt;
  &lt;li&gt;“45m” starts a 45 minute timer&lt;/li&gt;
  &lt;li&gt;“1h 15m” becomes an hour and fifteen minutes&lt;/li&gt;
  &lt;li&gt;“60s” will play a sound in a minute&lt;/li&gt;
  &lt;li&gt;Leaving the input blank will start a stopwatch&lt;/li&gt;
  &lt;li&gt;“@3pm” will set a countdown timer to go off at 3pm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While short, this is still a lot of possible formats. I would never be able to remember these just by reading the manual once. Luckily, Horo utilizes the placeholder in an intuitive way to educate users. Every time you open the app, you see a different example of the input formats you can use.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/horo-timer-gallery.png&quot; alt=&quot;Horo timer placeholder examples&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is the first app I’ve used that I’ve noticed uses this way of educating the user. While the list of accepted formats is always available in the apps web page, presenting these formats in the placeholder does 2 things for the user:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Automatic discovery. The user intuitively builds a sense that they can use multiple formats for the input, and are shown a different format every time which educates them on the possibilities.&lt;/li&gt;
  &lt;li&gt;Spaced repetition. By showing the formats repeatedly, the user ends up remembering more than they would just by reading a manual once. Spaced repetition is a well researched method of learning effectively, and I think Horo uses it to it’s advantage quite well.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-takeaway&quot;&gt;The takeaway&lt;/h2&gt;

&lt;p&gt;The lesson I learned is to look for these opportunities in the applications I build. A great place to educate users is:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Where you can unobtrusively add hints on usage. The placeholder does not get in the way yet delivers the information.&lt;/li&gt;
  &lt;li&gt;Where the user will see the hint multiple times during regular usage of the application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finding places in your applications where this strategy can be used might take time and some luck, but if you find these, I believe capitalizing on the opportunity will lead to a much more &lt;strong&gt;delightful&lt;/strong&gt; user experience.&lt;/p&gt;

&lt;p&gt;After all I ended up writing a whole blog post on how a simple timer app uses a placeholder. :)&lt;/p&gt;</content><author><name></name></author><summary type="html">Horo is a simple menu bar timer app for the Mac.</summary></entry></feed>